version: '3.8'

services:
  # База данных PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: veles_db_dev
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=veles_auto
      - POSTGRES_USER=veles_user
      - POSTGRES_PASSWORD=veles_password_2024
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U veles_user -d veles_auto"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - veles_network_dev
    restart: unless-stopped

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: veles_redis_dev
    volumes:
      - redis_data_dev:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - veles_network_dev
    restart: unless-stopped

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: veles_backend_dev
    volumes:
      - ./backend:/app
      - static_volume_dev:/app/staticfiles
      - media_volume_dev:/app/mediafiles
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=veles_auto.settings
      - SECRET_KEY=dev-secret-key-for-local-development-only-2024
      - DATABASE_URL=postgres://veles_user:veles_password_2024@db:5432/veles_auto
      - POSTGRES_DB=veles_auto
      - POSTGRES_USER=veles_user
      - POSTGRES_PASSWORD=veles_password_2024
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000
      - TELEGRAM_BOT_TOKEN=
      - TELEGRAM_CHANNEL_ID=
      - TELEGRAM_CHANNEL_USERNAME=
      - SENTRY_DSN=
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python manage.py runserver 0.0.0.0:8000
    networks:
      - veles_network_dev
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: veles_frontend_dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_DOMAIN=localhost
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - veles_network_dev
    restart: unless-stopped

  # Telegram Mini App Frontend
  tg_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: veles_tg_frontend_dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_TELEGRAM_MODE=true
      - REACT_APP_DOMAIN=localhost
    ports:
      - "3001:3000"
    depends_on:
      - backend
    networks:
      - veles_network_dev
    restart: unless-stopped

volumes:
  postgres_data_dev:
  redis_data_dev:
  static_volume_dev:
  media_volume_dev:

networks:
  veles_network_dev:
    driver: bridge 