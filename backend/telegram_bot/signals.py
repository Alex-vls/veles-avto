from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from django.utils import timezone
from .models import TelegramUser, TelegramNotification
from .services import TelegramNotificationService


@receiver(post_save, sender='erp.ProjectTask')
def notify_task_assigned(sender, instance, created, **kwargs):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
    if created and instance.assigned_to:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –ø—Ä–æ—Ñ–∏–ª—å
            telegram_user = TelegramUser.objects.filter(
                user=instance.assigned_to,
                is_active=True
            ).first()
            
            if telegram_user:
                notification_service = TelegramNotificationService()
                
                task_data = {
                    'title': instance.title,
                    'project': instance.column.board.name if instance.column else '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞',
                    'priority': instance.get_priority_display(),
                    'due_date': instance.due_date.strftime('%d.%m.%Y') if instance.due_date else '–ù–µ —É–∫–∞–∑–∞–Ω'
                }
                
                notification_service.send_task_assigned_notification(telegram_user, task_data)
        
        except Exception as e:
            print(f"Error sending task assignment notification: {e}")


@receiver(post_save, sender='erp.ProjectTask')
def notify_task_completed(sender, instance, **kwargs):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
    if instance.status == 'completed' and instance.assigned_to:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –ø—Ä–æ—Ñ–∏–ª—å
            telegram_user = TelegramUser.objects.filter(
                user=instance.assigned_to,
                is_active=True
            ).first()
            
            if telegram_user:
                notification_service = TelegramNotificationService()
                
                task_data = {
                    'title': instance.title,
                    'project': instance.column.board.name if instance.column else '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞',
                    'completed_by': instance.assigned_to.username
                }
                
                notification_service.send_task_completed_notification(telegram_user, task_data)
        
        except Exception as e:
            print(f"Error sending task completion notification: {e}")


@receiver(post_save, sender='erp.Sale')
def notify_sale_created(sender, instance, created, **kwargs):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏"""
    if created and instance.customer:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –ø—Ä–æ—Ñ–∏–ª—å
            telegram_user = TelegramUser.objects.filter(
                user=instance.customer,
                is_active=True
            ).first()
            
            if telegram_user:
                notification_service = TelegramNotificationService()
                
                sale_data = {
                    'car': instance.car.title,
                    'amount': instance.sale_price,
                    'company': instance.company.name,
                    'customer': instance.customer.username
                }
                
                notification_service.send_sale_notification(telegram_user, sale_data)
        
        except Exception as e:
            print(f"Error sending sale notification: {e}")


@receiver(post_save, sender='erp.ProjectBoard')
def notify_project_update(sender, instance, **kwargs):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        from erp.models import ProjectTask
        
        participants = ProjectTask.objects.filter(
            column__board=instance
        ).values_list('assigned_to', flat=True).distinct()
        
        for user_id in participants:
            if user_id:
                telegram_user = TelegramUser.objects.filter(
                    user_id=user_id,
                    is_active=True
                ).first()
                
                if telegram_user:
                    notification_service = TelegramNotificationService()
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    total_tasks = ProjectTask.objects.filter(column__board=instance).count()
                    completed_tasks = ProjectTask.objects.filter(
                        column__board=instance,
                        status='completed'
                    ).count()
                    
                    progress = int((completed_tasks / total_tasks * 100) if total_tasks > 0 else 0)
                    
                    project_data = {
                        'name': instance.name,
                        'progress': progress,
                        'tasks_count': total_tasks,
                        'completed_tasks': completed_tasks
                    }
                    
                    notification_service.send_project_update_notification(telegram_user, project_data)
    
    except Exception as e:
        print(f"Error sending project update notification: {e}")


@receiver(post_save, sender='erp.ServiceOrder')
def notify_service_order(sender, instance, created, **kwargs):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"""
    if created and instance.customer:
        try:
            telegram_user = TelegramUser.objects.filter(
                user=instance.customer,
                is_active=True
            ).first()
            
            if telegram_user:
                notification = TelegramNotification.objects.create(
                    user=telegram_user,
                    notification_type='service_order',
                    title='üîß –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
                    message=f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: <b>{instance.service.name}</b>\n\n"
                           f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {instance.car.title}\n"
                           f"–°—Ç–∞—Ç—É—Å: {instance.get_status_display()}\n"
                           f"–î–∞—Ç–∞: {instance.created_at.strftime('%d.%m.%Y')}",
                    data={
                        'service_order_id': instance.id,
                        'service_name': instance.service.name,
                        'car': instance.car.title,
                        'status': instance.status
                    }
                )
                
                notification_service = TelegramNotificationService()
                notification_service.send_notification(notification)
        
        except Exception as e:
            print(f"Error sending service order notification: {e}")


@receiver(post_save, sender='erp.Financial')
def notify_large_transaction(sender, instance, created, **kwargs):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö"""
    if created and abs(instance.amount) > 100000:  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –±–æ–ª—å—à–µ 100k
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏
            if instance.company and instance.company.user:
                telegram_user = TelegramUser.objects.filter(
                    user=instance.company.user,
                    is_active=True
                ).first()
                
                if telegram_user:
                    transaction_type = "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ" if instance.amount > 0 else "–†–∞—Å—Ö–æ–¥"
                    
                    notification = TelegramNotification.objects.create(
                        user=telegram_user,
                        notification_type='financial',
                        title=f'üí∞ –ö—Ä—É–ø–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è',
                        message=f"<b>{transaction_type}</b>: {abs(instance.amount)} ‚ÇΩ\n\n"
                               f"–û–ø–∏—Å–∞–Ω–∏–µ: {instance.description}\n"
                               f"–î–∞—Ç–∞: {instance.date.strftime('%d.%m.%Y')}\n"
                               f"–¢–∏–ø: {instance.get_transaction_type_display()}",
                        data={
                            'amount': instance.amount,
                            'description': instance.description,
                            'transaction_type': instance.transaction_type,
                            'date': instance.date.isoformat()
                        }
                    )
                    
                    notification_service = TelegramNotificationService()
                    notification_service.send_notification(notification)
        
        except Exception as e:
            print(f"Error sending financial notification: {e}")


@receiver(post_save, sender='veles_auto.Car')
def notify_car_status_change(sender, instance, **kwargs):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    try:
        if instance.company and instance.company.user:
            telegram_user = TelegramUser.objects.filter(
                user=instance.company.user,
                is_active=True
            ).first()
            
            if telegram_user:
                status_text = "–¥–æ—Å—Ç—É–ø–µ–Ω" if instance.is_available else "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                
                notification = TelegramNotification.objects.create(
                    user=telegram_user,
                    notification_type='car_status',
                    title='üöó –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
                    message=f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å <b>{instance.brand.name} {instance.model}</b> —Ç–µ–ø–µ—Ä—å {status_text}\n\n"
                           f"–ì–æ–¥: {instance.year}\n"
                           f"–¶–µ–Ω–∞: {instance.price} ‚ÇΩ",
                    data={
                        'car_id': instance.id,
                        'brand': instance.brand.name,
                        'model': instance.model,
                        'is_available': instance.is_available
                    }
                )
                
                notification_service = TelegramNotificationService()
                notification_service.send_notification(notification)
    
    except Exception as e:
        print(f"Error sending car status notification: {e}")


@receiver(post_save, sender='companies.Company')
def notify_company_verification(sender, instance, **kwargs):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    if instance.is_verified and instance.user:
        try:
            telegram_user = TelegramUser.objects.filter(
                user=instance.user,
                is_active=True
            ).first()
            
            if telegram_user:
                notification = TelegramNotification.objects.create(
                    user=telegram_user,
                    notification_type='company_verified',
                    title='‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞',
                    message=f"–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è <b>{instance.name}</b> —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                           f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.",
                    data={
                        'company_id': instance.id,
                        'company_name': instance.name
                    }
                )
                
                notification_service = TelegramNotificationService()
                notification_service.send_notification(notification)
        
        except Exception as e:
            print(f"Error sending company verification notification: {e}")


# –°–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
def send_overdue_task_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"""
    try:
        from erp.models import ProjectTask
        
        overdue_tasks = ProjectTask.objects.filter(
            due_date__lt=timezone.now().date(),
            status__in=['pending', 'in_progress'],
            assigned_to__isnull=False
        )
        
        for task in overdue_tasks:
            telegram_user = TelegramUser.objects.filter(
                user=task.assigned_to,
                is_active=True
            ).first()
            
            if telegram_user:
                notification = TelegramNotification.objects.create(
                    user=telegram_user,
                    notification_type='task_overdue',
                    title='‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞',
                    message=f"–ó–∞–¥–∞—á–∞ <b>{task.title}</b> –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!\n\n"
                           f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task.due_date.strftime('%d.%m.%Y')}\n"
                           f"–ü—Ä–æ–µ–∫—Ç: {task.column.board.name if task.column else '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'}",
                    data={
                        'task_id': task.id,
                        'task_title': task.title,
                        'due_date': task.due_date.isoformat()
                    }
                )
                
                notification_service = TelegramNotificationService()
                notification_service.send_notification(notification)
    
    except Exception as e:
        print(f"Error sending overdue task reminders: {e}")


# –°–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
def send_daily_reports():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        from erp.models import ProjectTask, Sale, ServiceOrder
        from django.db.models import Count
        from django.utils import timezone
        
        today = timezone.now().date()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram
        telegram_users = TelegramUser.objects.filter(is_active=True)
        
        for telegram_user in telegram_users:
            user = telegram_user.user
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
            tasks_created = ProjectTask.objects.filter(
                created_by=user,
                created_at__date=today
            ).count()
            
            tasks_completed = ProjectTask.objects.filter(
                assigned_to=user,
                status='completed',
                updated_at__date=today
            ).count()
            
            sales_created = Sale.objects.filter(
                customer=user,
                sale_date__date=today
            ).count()
            
            service_orders = ServiceOrder.objects.filter(
                customer=user,
                created_at__date=today
            ).count()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if tasks_created > 0 or tasks_completed > 0 or sales_created > 0 or service_orders > 0:
                notification = TelegramNotification.objects.create(
                    user=telegram_user,
                    notification_type='daily_report',
                    title='üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç',
                    message=f"<b>–û—Ç—á–µ—Ç –∑–∞ {today.strftime('%d.%m.%Y')}:</b>\n\n"
                           f"üìã –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {tasks_created}\n"
                           f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞—á: {tasks_completed}\n"
                           f"üí∞ –ü—Ä–æ–¥–∞–∂: {sales_created}\n"
                           f"üîß –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {service_orders}",
                    data={
                        'date': today.isoformat(),
                        'tasks_created': tasks_created,
                        'tasks_completed': tasks_completed,
                        'sales_created': sales_created,
                        'service_orders': service_orders
                    }
                )
                
                notification_service = TelegramNotificationService()
                notification_service.send_notification(notification)
    
    except Exception as e:
        print(f"Error sending daily reports: {e}") 